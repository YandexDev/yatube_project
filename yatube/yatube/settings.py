"""
Django settings for yatube project.

Generated by 'django-admin startproject' using Django 2.2.19.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "hf3g0^###z_4a&t2hfd!hiioksx4p&sbvfo)#)9nut8(wgf!=&"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
# Практичнее регистрировать через конфиг: ведь тогда в apps.py можно будет
# в любой момент добавить дополнительные настройки приложения. При регистрации
# через имя такой возможности не будет.
INSTALLED_APPS = [
    "core.apps.CoreConfig",  # Регистрация приложения core
    "posts.apps.PostsConfig",  # Регистрация приложения posts
    "users.apps.UsersConfig",  # Регистрация приложения users
    "about.apps.AboutConfig",  # Регистрация приложения about(статичные страницы)
    "django.contrib.admin",
    "django.contrib.auth",  # Приложение для регистрация и авторизация пользователей
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "yatube.urls"

TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")

TEMPLATES = [
    {
        # Шаблонизатор (DTL pr Jinja2)
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # Добавлено: Искать шаблоны на уровне проекта
        "DIRS": [TEMPLATES_DIR],
        # Оставляем True: шаблоны встроенных приложений (например, админки)
        # нужно искать в директориях приложений
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # Добавлен контекст-процессор
                # Найди в корне проекта папку core/, в ней - папку context_processors/,
                # там - файл year.py, а в этом файле - функцию year().
                "core.context_processors.year.year",
            ],
        },
    },
]

WSGI_APPLICATION = "yatube.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "ru"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

# какие страницы надо показывать пользователю после входа в аккаунт и при выходе из него
# Значение по умолчанию: '/accounts/login/'
# Это адрес, на который Django будет перенаправлять пользователей для авторизации.
# Это особенно важно при использовании декоратора @login_required
LOGIN_URL = "users:login"
# Значение по умолчанию: '/accounts/profile/'
# Здесь указывается, куда перенаправить пользователя после успешной авторизации
LOGIN_REDIRECT_URL = "posts:index"
# Значение по умолчанию: '/auth/logout/'
# Адрес, на который будет направлен пользователь после выхода из системы.
# Можно оставить штатный, а можно раскомментировать строку
# LOGOUT_REDIRECT_URL = 'posts:index' — и при выходе из аккаунта пользователи будут перенаправляться на главную страницу проекта.
# LOGOUT_REDIRECT_URL = 'posts:index'


# Подключите к проекту модуль filebased.EmailBackend:
# он будет сохранять текст отправленных электронных писем в файлы в отдельную директорию
# подключаем движок filebased.EmailBackend
EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
# указываем директорию, в которую будут складываться файлы писем
EMAIL_FILE_PATH = os.path.join(BASE_DIR, "sent_emails")
